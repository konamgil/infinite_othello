import type { LucideIcon } from 'lucide-react';

import { homeRoute } from '../../features/home/route';
import { battleRoute } from '../../features/battle/route';
import { towerRoute } from '../../features/tower/route';
import { stellaRoute } from '../../features/stella/route';
import { moreRoute } from '../../features/more/route';
import type { AppRouteObject, RouteMeta } from './meta';

/**
 * An array of the top-level (root) route objects for the application.
 * These routes correspond to the main features accessible from the bottom navigation bar.
 */
export const appRootChildren: AppRouteObject[] = [
  homeRoute,
  battleRoute,
  towerRoute,
  stellaRoute,
  moreRoute,
];

/**
 * Represents an item in the bottom navigation bar.
 */
type NavItem = {
  /** The path to navigate to when the item is clicked. */
  path: string;
  /** The text label for the navigation item. */
  label: string;
  /** The icon component for the navigation item. */
  icon: LucideIcon;
};

/**
 * Extracts navigation item properties from a route object.
 *
 * This function checks if a given route object has root-level metadata.
 * If it does, it transforms that metadata into a `NavItem` object.
 * If the route is not a root route or has no metadata, it returns `null`.
 *
 * @param {AppRouteObject} route - The route object to process.
 * @returns {NavItem | null} A `NavItem` object if the route is a navigable root route, otherwise `null`.
 */
const extractNavItem = (route: AppRouteObject): NavItem | null => {
  const meta = (route.handle as { meta?: RouteMeta } | undefined)?.meta;
  if (meta?.isRoot !== true) {
    return null;
  }

  return {
    path: meta.navPath,
    label: meta.title,
    icon: meta.icon,
  };
};

/**
 * An array of `NavItem` objects for the bottom navigation bar.
 *
 * This array is generated by processing the `appRootChildren` routes,
 * extracting the navigation-related metadata from each, and filtering out any
 * routes that are not meant to be displayed in the navigation.
 */
export const rootNavItems: NavItem[] = appRootChildren
  .map(extractNavItem)
  .filter((item): item is NavItem => item !== null);
